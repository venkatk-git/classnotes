{
  "title": "Basic Syntax and Data Types in Java",
  "author": "Venkat",
  "description": "An introduction to Java's fundamental syntax and data types\r",
  "body": {
    "raw": "\r\n# Basic Syntax and Data Types in Java\r\n\r\nThis guide introduces you to the basic syntax and data types in Java, providing a foundation for writing Java programs.\r\n\r\n## Java Program Structure\r\n\r\nA basic Java program consists of:\r\n\r\n1. Package declaration (optional)\r\n2. Import statements (optional)\r\n3. Class definition\r\n4. Main method (for executable programs)\r\n\r\nHere's a simple example:\r\n\r\n```java\r\npackage com.example;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello, World!\");\r\n    }\r\n}\r\n```\r\n\r\n## Variables and Data Types\r\n\r\nJava is a statically-typed language, which means you must declare a variable's type before using it.\r\n\r\n### Variable Declaration\r\n\r\nThe syntax for declaring a variable is:\r\n\r\n```java\r\ndataType variableName = value;\r\n```\r\n\r\nFor example:\r\n\r\n```java\r\nint age = 25;\r\nString name = \"John\";\r\n```\r\n\r\n### Primitive Data Types\r\n\r\nJava has eight primitive data types:\r\n\r\n1. **byte**: 8-bit signed two's complement integer\r\n\r\n    ```java\r\n    byte b = 100;\r\n    ```\r\n\r\n2. **short**: 16-bit signed two's complement integer\r\n\r\n    ```java\r\n    short s = 10000;\r\n    ```\r\n\r\n3. **int**: 32-bit signed two's complement integer\r\n\r\n    ```java\r\n    int i = 100000;\r\n    ```\r\n\r\n4. **long**: 64-bit signed two's complement integer\r\n\r\n    ```java\r\n    long l = 1000000000L;\r\n    ```\r\n\r\n5. **float**: 32-bit IEEE 754 floating point\r\n\r\n    ```java\r\n    float f = 3.14f;\r\n    ```\r\n\r\n6. **double**: 64-bit IEEE 754 floating point\r\n\r\n    ```java\r\n    double d = 3.14159265359;\r\n    ```\r\n\r\n7. **boolean**: true or false\r\n\r\n    ```java\r\n    boolean isJavaFun = true;\r\n    ```\r\n\r\n8. **char**: 16-bit Unicode character\r\n    ```java\r\n    char c = 'A';\r\n    ```\r\n\r\n### Reference Data Types\r\n\r\nReference types are used to store complex objects. The most commonly used reference type is String:\r\n\r\n```java\r\nString greeting = \"Hello, Java!\";\r\n```\r\n\r\n## Operators\r\n\r\nJava provides various operators for performing operations on variables and values.\r\n\r\n### Arithmetic Operators\r\n\r\n-   `+` (addition)\r\n-   `-` (subtraction)\r\n-   `*` (multiplication)\r\n-   `/` (division)\r\n-   `%` (modulus)\r\n\r\nExample:\r\n\r\n```java\r\nint a = 10;\r\nint b = 3;\r\nint sum = a + b;  // 13\r\nint difference = a - b;  // 7\r\nint product = a * b;  // 30\r\nint quotient = a / b;  // 3\r\nint remainder = a % b;  // 1\r\n```\r\n\r\n### Comparison Operators\r\n\r\n-   `==` (equal to)\r\n-   `!=` (not equal to)\r\n-   `>` (greater than)\r\n-   `<` (less than)\r\n-   `>=` (greater than or equal to)\r\n-   `<=` (less than or equal to)\r\n\r\nExample:\r\n\r\n```java\r\nint x = 5;\r\nint y = 8;\r\nboolean isEqual = (x == y);  // false\r\nboolean isGreater = (x > y);  // false\r\n```\r\n\r\n### Logical Operators\r\n\r\n-   `&&` (logical AND)\r\n-   `||` (logical OR)\r\n-   `!` (logical NOT)\r\n\r\nExample:\r\n\r\n```java\r\nboolean a = true;\r\nboolean b = false;\r\nboolean result = a && b;  // false\r\nresult = a || b;  // true\r\nresult = !a;  // false\r\n```\r\n\r\n## Control Flow Statements\r\n\r\nJava uses control flow statements to determine the order in which statements are executed.\r\n\r\n### If-Else Statement\r\n\r\n```java\r\nint score = 85;\r\nif (score >= 90) {\r\n    System.out.println(\"Excellent\");\r\n} else if (score >= 80) {\r\n    System.out.println(\"Good\");\r\n} else {\r\n    System.out.println(\"Keep practicing\");\r\n}\r\n```\r\n\r\n### For Loop\r\n\r\n```java\r\nfor (int i = 0; i < 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\r\n```\r\n\r\n### While Loop\r\n\r\n```java\r\nint count = 0;\r\nwhile (count < 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\r\n```\r\n\r\n## Conclusion\r\n\r\nThis guide covers the basic syntax and data types in Java. Understanding these fundamentals is crucial for writing Java programs. As you progress, you'll build upon these concepts to create more complex and powerful applications.\r\n",
    "code": "var Component=(()=>{var p=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var b=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),f=(r,n)=>{for(var a in n)l(r,a,{get:n[a],enumerable:!0})},t=(r,n,a,c)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of g(n))!v.call(r,i)&&i!==a&&l(r,i,{get:()=>n[i],enumerable:!(c=u(n,i))||c.enumerable});return r};var y=(r,n,a)=>(a=r!=null?p(m(r)):{},t(n||!r||!r.__esModule?l(a,\"default\",{value:r,enumerable:!0}):a,r)),x=r=>t(l({},\"__esModule\",{value:!0}),r);var d=b((S,o)=>{o.exports=_jsx_runtime});var N={};f(N,{default:()=>h,frontmatter:()=>j});var e=y(d()),j={title:\"Basic Syntax and Data Types in Java\",author:\"Venkat\",description:\"An introduction to Java's fundamental syntax and data types\"};function s(r){let n={code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...r.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h1,{children:\"Basic Syntax and Data Types in Java\"}),`\n`,(0,e.jsx)(n.p,{children:\"This guide introduces you to the basic syntax and data types in Java, providing a foundation for writing Java programs.\"}),`\n`,(0,e.jsx)(n.h2,{children:\"Java Program Structure\"}),`\n`,(0,e.jsx)(n.p,{children:\"A basic Java program consists of:\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Package declaration (optional)\"}),`\n`,(0,e.jsx)(n.li,{children:\"Import statements (optional)\"}),`\n`,(0,e.jsx)(n.li,{children:\"Class definition\"}),`\n`,(0,e.jsx)(n.li,{children:\"Main method (for executable programs)\"}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Here's a simple example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`package com.example;\\r\n\\r\nimport java.util.Scanner;\\r\n\\r\npublic class HelloWorld {\\r\n    public static void main(String[] args) {\\r\n        System.out.println(\"Hello, World!\");\\r\n    }\\r\n}\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Variables and Data Types\"}),`\n`,(0,e.jsx)(n.p,{children:\"Java is a statically-typed language, which means you must declare a variable's type before using it.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Variable Declaration\"}),`\n`,(0,e.jsx)(n.p,{children:\"The syntax for declaring a variable is:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`dataType variableName = value;\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"For example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`int age = 25;\\r\nString name = \"John\";\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Primitive Data Types\"}),`\n`,(0,e.jsx)(n.p,{children:\"Java has eight primitive data types:\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"byte\"}),\": 8-bit signed two's complement integer\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`byte b = 100;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"short\"}),\": 16-bit signed two's complement integer\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`short s = 10000;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"int\"}),\": 32-bit signed two's complement integer\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`int i = 100000;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"long\"}),\": 64-bit signed two's complement integer\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`long l = 1000000000L;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"float\"}),\": 32-bit IEEE 754 floating point\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`float f = 3.14f;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"double\"}),\": 64-bit IEEE 754 floating point\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`double d = 3.14159265359;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"boolean\"}),\": true or false\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`boolean isJavaFun = true;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"char\"}),\": 16-bit Unicode character\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`char c = 'A';\n`})}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"Reference Data Types\"}),`\n`,(0,e.jsx)(n.p,{children:\"Reference types are used to store complex objects. The most commonly used reference type is String:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`String greeting = \"Hello, Java!\";\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Operators\"}),`\n`,(0,e.jsx)(n.p,{children:\"Java provides various operators for performing operations on variables and values.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Arithmetic Operators\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"+\"}),\" (addition)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"-\"}),\" (subtraction)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"*\"}),\" (multiplication)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"/\"}),\" (division)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"%\"}),\" (modulus)\"]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`int a = 10;\\r\nint b = 3;\\r\nint sum = a + b;  // 13\\r\nint difference = a - b;  // 7\\r\nint product = a * b;  // 30\\r\nint quotient = a / b;  // 3\\r\nint remainder = a % b;  // 1\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Comparison Operators\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"==\"}),\" (equal to)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"!=\"}),\" (not equal to)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\">\"}),\" (greater than)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"<\"}),\" (less than)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\">=\"}),\" (greater than or equal to)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"<=\"}),\" (less than or equal to)\"]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`int x = 5;\\r\nint y = 8;\\r\nboolean isEqual = (x == y);  // false\\r\nboolean isGreater = (x > y);  // false\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Logical Operators\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"&&\"}),\" (logical AND)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"||\"}),\" (logical OR)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"!\"}),\" (logical NOT)\"]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`boolean a = true;\\r\nboolean b = false;\\r\nboolean result = a && b;  // false\\r\nresult = a || b;  // true\\r\nresult = !a;  // false\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Control Flow Statements\"}),`\n`,(0,e.jsx)(n.p,{children:\"Java uses control flow statements to determine the order in which statements are executed.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"If-Else Statement\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`int score = 85;\\r\nif (score >= 90) {\\r\n    System.out.println(\"Excellent\");\\r\n} else if (score >= 80) {\\r\n    System.out.println(\"Good\");\\r\n} else {\\r\n    System.out.println(\"Keep practicing\");\\r\n}\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"For Loop\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`for (int i = 0; i < 5; i++) {\\r\n    System.out.println(\"Iteration: \" + i);\\r\n}\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"While Loop\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`int count = 0;\\r\nwhile (count < 5) {\\r\n    System.out.println(\"Count: \" + count);\\r\n    count++;\\r\n}\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Conclusion\"}),`\n`,(0,e.jsx)(n.p,{children:\"This guide covers the basic syntax and data types in Java. Understanding these fundamentals is crucial for writing Java programs. As you progress, you'll build upon these concepts to create more complex and powerful applications.\"})]})}function h(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,{...r,children:(0,e.jsx)(s,{...r})}):s(r)}return x(N);})();\n;return Component;"
  },
  "_id": "java/basic-syntax-and-data-types.mdx",
  "_raw": {
    "sourceFilePath": "java/basic-syntax-and-data-types.mdx",
    "sourceFileName": "basic-syntax-and-data-types.mdx",
    "sourceFileDir": "java",
    "contentType": "mdx",
    "flattenedPath": "java/basic-syntax-and-data-types"
  },
  "type": "Java",
  "slug": "/java/basic-syntax-and-data-types",
  "slugAsParams": "basic-syntax-and-data-types"
}