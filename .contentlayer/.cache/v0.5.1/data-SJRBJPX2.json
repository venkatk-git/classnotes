{
  "cacheItemsMap": {
    "java/basic-syntax-and-data-types.mdx": {
      "document": {
        "title": "Basic Syntax and Data Types in Java",
        "author": "Venkat",
        "description": "An introduction to Java's fundamental syntax and data types\r",
        "body": {
          "raw": "\r\n# Basic Syntax and Data Types in Java\r\n\r\nThis guide introduces you to the basic syntax and data types in Java, providing a foundation for writing Java programs.\r\n\r\n## Java Program Structure\r\n\r\nA basic Java program consists of:\r\n\r\n1. Package declaration (optional)\r\n2. Import statements (optional)\r\n3. Class definition\r\n4. Main method (for executable programs)\r\n\r\nHere's a simple example:\r\n\r\n```java\r\npackage com.example;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello, World!\");\r\n    }\r\n}\r\n```\r\n\r\n## Variables and Data Types\r\n\r\nJava is a statically-typed language, which means you must declare a variable's type before using it.\r\n\r\n### Variable Declaration\r\n\r\nThe syntax for declaring a variable is:\r\n\r\n```java\r\ndataType variableName = value;\r\n```\r\n\r\nFor example:\r\n\r\n```java\r\nint age = 25;\r\nString name = \"John\";\r\n```\r\n\r\n### Primitive Data Types\r\n\r\nJava has eight primitive data types:\r\n\r\n1. **byte**: 8-bit signed two's complement integer\r\n\r\n    ```java\r\n    byte b = 100;\r\n    ```\r\n\r\n2. **short**: 16-bit signed two's complement integer\r\n\r\n    ```java\r\n    short s = 10000;\r\n    ```\r\n\r\n3. **int**: 32-bit signed two's complement integer\r\n\r\n    ```java\r\n    int i = 100000;\r\n    ```\r\n\r\n4. **long**: 64-bit signed two's complement integer\r\n\r\n    ```java\r\n    long l = 1000000000L;\r\n    ```\r\n\r\n5. **float**: 32-bit IEEE 754 floating point\r\n\r\n    ```java\r\n    float f = 3.14f;\r\n    ```\r\n\r\n6. **double**: 64-bit IEEE 754 floating point\r\n\r\n    ```java\r\n    double d = 3.14159265359;\r\n    ```\r\n\r\n7. **boolean**: true or false\r\n\r\n    ```java\r\n    boolean isJavaFun = true;\r\n    ```\r\n\r\n8. **char**: 16-bit Unicode character\r\n    ```java\r\n    char c = 'A';\r\n    ```\r\n\r\n### Reference Data Types\r\n\r\nReference types are used to store complex objects. The most commonly used reference type is String:\r\n\r\n```java\r\nString greeting = \"Hello, Java!\";\r\n```\r\n\r\n## Operators\r\n\r\nJava provides various operators for performing operations on variables and values.\r\n\r\n### Arithmetic Operators\r\n\r\n-   `+` (addition)\r\n-   `-` (subtraction)\r\n-   `*` (multiplication)\r\n-   `/` (division)\r\n-   `%` (modulus)\r\n\r\nExample:\r\n\r\n```java\r\nint a = 10;\r\nint b = 3;\r\nint sum = a + b;  // 13\r\nint difference = a - b;  // 7\r\nint product = a * b;  // 30\r\nint quotient = a / b;  // 3\r\nint remainder = a % b;  // 1\r\n```\r\n\r\n### Comparison Operators\r\n\r\n-   `==` (equal to)\r\n-   `!=` (not equal to)\r\n-   `>` (greater than)\r\n-   `<` (less than)\r\n-   `>=` (greater than or equal to)\r\n-   `<=` (less than or equal to)\r\n\r\nExample:\r\n\r\n```java\r\nint x = 5;\r\nint y = 8;\r\nboolean isEqual = (x == y);  // false\r\nboolean isGreater = (x > y);  // false\r\n```\r\n\r\n### Logical Operators\r\n\r\n-   `&&` (logical AND)\r\n-   `||` (logical OR)\r\n-   `!` (logical NOT)\r\n\r\nExample:\r\n\r\n```java\r\nboolean a = true;\r\nboolean b = false;\r\nboolean result = a && b;  // false\r\nresult = a || b;  // true\r\nresult = !a;  // false\r\n```\r\n\r\n## Control Flow Statements\r\n\r\nJava uses control flow statements to determine the order in which statements are executed.\r\n\r\n### If-Else Statement\r\n\r\n```java\r\nint score = 85;\r\nif (score >= 90) {\r\n    System.out.println(\"Excellent\");\r\n} else if (score >= 80) {\r\n    System.out.println(\"Good\");\r\n} else {\r\n    System.out.println(\"Keep practicing\");\r\n}\r\n```\r\n\r\n### For Loop\r\n\r\n```java\r\nfor (int i = 0; i < 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\r\n```\r\n\r\n### While Loop\r\n\r\n```java\r\nint count = 0;\r\nwhile (count < 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\r\n```\r\n\r\n## Conclusion\r\n\r\nThis guide covers the basic syntax and data types in Java. Understanding these fundamentals is crucial for writing Java programs. As you progress, you'll build upon these concepts to create more complex and powerful applications.\r\n",
          "code": "var Component=(()=>{var p=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var b=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),f=(r,n)=>{for(var a in n)l(r,a,{get:n[a],enumerable:!0})},t=(r,n,a,c)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of g(n))!v.call(r,i)&&i!==a&&l(r,i,{get:()=>n[i],enumerable:!(c=u(n,i))||c.enumerable});return r};var y=(r,n,a)=>(a=r!=null?p(m(r)):{},t(n||!r||!r.__esModule?l(a,\"default\",{value:r,enumerable:!0}):a,r)),x=r=>t(l({},\"__esModule\",{value:!0}),r);var d=b((S,o)=>{o.exports=_jsx_runtime});var N={};f(N,{default:()=>h,frontmatter:()=>j});var e=y(d()),j={title:\"Basic Syntax and Data Types in Java\",author:\"Venkat\",description:\"An introduction to Java's fundamental syntax and data types\"};function s(r){let n={code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...r.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h1,{children:\"Basic Syntax and Data Types in Java\"}),`\n`,(0,e.jsx)(n.p,{children:\"This guide introduces you to the basic syntax and data types in Java, providing a foundation for writing Java programs.\"}),`\n`,(0,e.jsx)(n.h2,{children:\"Java Program Structure\"}),`\n`,(0,e.jsx)(n.p,{children:\"A basic Java program consists of:\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Package declaration (optional)\"}),`\n`,(0,e.jsx)(n.li,{children:\"Import statements (optional)\"}),`\n`,(0,e.jsx)(n.li,{children:\"Class definition\"}),`\n`,(0,e.jsx)(n.li,{children:\"Main method (for executable programs)\"}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Here's a simple example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`package com.example;\\r\n\\r\nimport java.util.Scanner;\\r\n\\r\npublic class HelloWorld {\\r\n    public static void main(String[] args) {\\r\n        System.out.println(\"Hello, World!\");\\r\n    }\\r\n}\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Variables and Data Types\"}),`\n`,(0,e.jsx)(n.p,{children:\"Java is a statically-typed language, which means you must declare a variable's type before using it.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Variable Declaration\"}),`\n`,(0,e.jsx)(n.p,{children:\"The syntax for declaring a variable is:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`dataType variableName = value;\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"For example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`int age = 25;\\r\nString name = \"John\";\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Primitive Data Types\"}),`\n`,(0,e.jsx)(n.p,{children:\"Java has eight primitive data types:\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"byte\"}),\": 8-bit signed two's complement integer\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`byte b = 100;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"short\"}),\": 16-bit signed two's complement integer\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`short s = 10000;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"int\"}),\": 32-bit signed two's complement integer\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`int i = 100000;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"long\"}),\": 64-bit signed two's complement integer\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`long l = 1000000000L;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"float\"}),\": 32-bit IEEE 754 floating point\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`float f = 3.14f;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"double\"}),\": 64-bit IEEE 754 floating point\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`double d = 3.14159265359;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"boolean\"}),\": true or false\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`boolean isJavaFun = true;\n`})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"char\"}),\": 16-bit Unicode character\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`char c = 'A';\n`})}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"Reference Data Types\"}),`\n`,(0,e.jsx)(n.p,{children:\"Reference types are used to store complex objects. The most commonly used reference type is String:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`String greeting = \"Hello, Java!\";\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Operators\"}),`\n`,(0,e.jsx)(n.p,{children:\"Java provides various operators for performing operations on variables and values.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Arithmetic Operators\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"+\"}),\" (addition)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"-\"}),\" (subtraction)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"*\"}),\" (multiplication)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"/\"}),\" (division)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"%\"}),\" (modulus)\"]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`int a = 10;\\r\nint b = 3;\\r\nint sum = a + b;  // 13\\r\nint difference = a - b;  // 7\\r\nint product = a * b;  // 30\\r\nint quotient = a / b;  // 3\\r\nint remainder = a % b;  // 1\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Comparison Operators\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"==\"}),\" (equal to)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"!=\"}),\" (not equal to)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\">\"}),\" (greater than)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"<\"}),\" (less than)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\">=\"}),\" (greater than or equal to)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"<=\"}),\" (less than or equal to)\"]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`int x = 5;\\r\nint y = 8;\\r\nboolean isEqual = (x == y);  // false\\r\nboolean isGreater = (x > y);  // false\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Logical Operators\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"&&\"}),\" (logical AND)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"||\"}),\" (logical OR)\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"!\"}),\" (logical NOT)\"]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`boolean a = true;\\r\nboolean b = false;\\r\nboolean result = a && b;  // false\\r\nresult = a || b;  // true\\r\nresult = !a;  // false\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Control Flow Statements\"}),`\n`,(0,e.jsx)(n.p,{children:\"Java uses control flow statements to determine the order in which statements are executed.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"If-Else Statement\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`int score = 85;\\r\nif (score >= 90) {\\r\n    System.out.println(\"Excellent\");\\r\n} else if (score >= 80) {\\r\n    System.out.println(\"Good\");\\r\n} else {\\r\n    System.out.println(\"Keep practicing\");\\r\n}\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"For Loop\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`for (int i = 0; i < 5; i++) {\\r\n    System.out.println(\"Iteration: \" + i);\\r\n}\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"While Loop\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`int count = 0;\\r\nwhile (count < 5) {\\r\n    System.out.println(\"Count: \" + count);\\r\n    count++;\\r\n}\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Conclusion\"}),`\n`,(0,e.jsx)(n.p,{children:\"This guide covers the basic syntax and data types in Java. Understanding these fundamentals is crucial for writing Java programs. As you progress, you'll build upon these concepts to create more complex and powerful applications.\"})]})}function h(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,{...r,children:(0,e.jsx)(s,{...r})}):s(r)}return x(N);})();\n;return Component;"
        },
        "_id": "java/basic-syntax-and-data-types.mdx",
        "_raw": {
          "sourceFilePath": "java/basic-syntax-and-data-types.mdx",
          "sourceFileName": "basic-syntax-and-data-types.mdx",
          "sourceFileDir": "java",
          "contentType": "mdx",
          "flattenedPath": "java/basic-syntax-and-data-types"
        },
        "type": "Java",
        "slug": "/java/basic-syntax-and-data-types",
        "slugAsParams": "basic-syntax-and-data-types"
      },
      "documentHash": "1728631019175",
      "hasWarnings": false,
      "documentTypeName": "Java"
    },
    "java/classes-and-objects.mdx": {
      "document": {
        "title": "Classes and Objects in Java",
        "author": "Venkat",
        "description": "Understanding the fundamentals of classes and objects in Java",
        "body": {
          "raw": "\n# Classes and Objects in Java\n\nClasses and objects are fundamental concepts in Java's object-oriented programming paradigm. This guide will introduce you to these concepts and show you how to work with them.\n\n## What is a Class?\n\nA class is a blueprint or template for creating objects. It defines the attributes (data) and methods (behavior) that the objects of that class will have.\n\n### Class Structure\n\nHere's the basic structure of a Java class:\n\n```java\npublic class ClassName {\n    // Fields (attributes)\n    // Constructors\n    // Methods\n}\n```\n\n## Defining a Class\n\nLet's create a simple `Car` class:\n\n```java\npublic class Car {\n    // Fields\n    String brand;\n    String model;\n    int year;\n    \n    // Constructor\n    public Car(String brand, String model, int year) {\n        this.brand = brand;\n        this.model = model;\n        this.year = year;\n    }\n    \n    // Method\n    public void startEngine() {\n        System.out.println(\"The \" + brand + \" \" + model + \" is starting...\");\n    }\n}\n```\n\nIn this example:\n- `brand`, `model`, and `year` are fields (attributes) of the `Car` class.\n- The `Car` constructor initializes these fields when a new `Car` object is created.\n- `startEngine()` is a method that defines a behavior of the `Car` class.\n\n## Creating Objects\n\nAn object is an instance of a class. To create an object, we use the `new` keyword followed by a call to a constructor of the class.\n\n```java\nCar myCar = new Car(\"Toyota\", \"Corolla\", 2022);\n```\n\nThis creates a new `Car` object with the specified brand, model, and year.\n\n## Accessing Object Members\n\nWe can access the fields and methods of an object using the dot notation:\n\n```java\nSystem.out.println(myCar.brand);  // Outputs: Toyota\nmyCar.startEngine();  // Outputs: The Toyota Corolla is starting...\n```\n\n## Constructors\n\nConstructors are special methods used to initialize objects. They have the same name as the class and no return type.\n\n### Default Constructor\n\nIf you don't define any constructor, Java provides a default no-argument constructor:\n\n```java\npublic class Dog {\n    String name;\n}\n\nDog myDog = new Dog();  // Uses default constructor\n```\n\n### Overloading Constructors\n\nYou can define multiple constructors with different parameters:\n\n```java\npublic class Dog {\n    String name;\n    int age;\n    \n    public Dog(String name) {\n        this.name = name;\n    }\n    \n    public Dog(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\nDog dog1 = new Dog(\"Buddy\");\nDog dog2 = new Dog(\"Max\", 3);\n```\n\n## Methods\n\nMethods define the behavior of objects. They can take parameters and return values.\n\n```java\npublic class Rectangle {\n    double width;\n    double height;\n    \n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n    \n    public double calculateArea() {\n        return width * height;\n    }\n    \n    public void displayInfo() {\n        System.out.println(\"Width: \" + width + \", Height: \" + height);\n        System.out.println(\"Area: \" + calculateArea());\n    }\n}\n\nRectangle rect = new Rectangle(5, 3);\nrect.displayInfo();\n```\n\n## Static Members\n\nStatic members belong to the class rather than to any specific instance of the class.\n\n### Static Fields\n\nStatic fields are shared by all instances of a class:\n\n```java\npublic class Counter {\n    static int count = 0;\n    \n    public Counter() {\n        count++;\n    }\n}\n\nCounter c1 = new Counter();\nCounter c2 = new Counter();\nSystem.out.println(Counter.count);  // Outputs: 2\n```\n\n### Static Methods\n\nStatic methods can be called on the class itself, without creating an instance:\n\n```java\npublic class MathUtils {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}\n\nint sum = MathUtils.add(5, 3);  // sum is 8\n```\n\n## Conclusion\n\nClasses and objects are the building blocks of object-oriented programming in Java. Classes define the structure and behavior of objects, while objects are instances of classes that you can create and manipulate in your programs. Understanding these concepts is crucial for writing effective Java code.\n\n",
          "code": "var Component=(()=>{var u=Object.create;var c=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),C=(t,e)=>{for(var a in e)c(t,a,{get:e[a],enumerable:!0})},s=(t,e,a,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!b.call(t,i)&&i!==a&&c(t,i,{get:()=>e[i],enumerable:!(r=g(e,i))||r.enumerable});return t};var y=(t,e,a)=>(a=t!=null?u(m(t)):{},s(e||!t||!t.__esModule?c(a,\"default\",{value:t,enumerable:!0}):a,t)),j=t=>s(c({},\"__esModule\",{value:!0}),t);var o=f((D,l)=>{l.exports=_jsx_runtime});var v={};C(v,{default:()=>h,frontmatter:()=>w});var n=y(o()),w={title:\"Classes and Objects in Java\",author:\"Venkat\",description:\"Understanding the fundamentals of classes and objects in Java\"};function d(t){let e={code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Classes and Objects in Java\"}),`\n`,(0,n.jsx)(e.p,{children:\"Classes and objects are fundamental concepts in Java's object-oriented programming paradigm. This guide will introduce you to these concepts and show you how to work with them.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"What is a Class?\"}),`\n`,(0,n.jsx)(e.p,{children:\"A class is a blueprint or template for creating objects. It defines the attributes (data) and methods (behavior) that the objects of that class will have.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Class Structure\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here's the basic structure of a Java class:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-java\",children:`public class ClassName {\n    // Fields (attributes)\n    // Constructors\n    // Methods\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Defining a Class\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's create a simple \",(0,n.jsx)(e.code,{children:\"Car\"}),\" class:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-java\",children:`public class Car {\n    // Fields\n    String brand;\n    String model;\n    int year;\n    \n    // Constructor\n    public Car(String brand, String model, int year) {\n        this.brand = brand;\n        this.model = model;\n        this.year = year;\n    }\n    \n    // Method\n    public void startEngine() {\n        System.out.println(\"The \" + brand + \" \" + model + \" is starting...\");\n    }\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"In this example:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"brand\"}),\", \",(0,n.jsx)(e.code,{children:\"model\"}),\", and \",(0,n.jsx)(e.code,{children:\"year\"}),\" are fields (attributes) of the \",(0,n.jsx)(e.code,{children:\"Car\"}),\" class.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Car\"}),\" constructor initializes these fields when a new \",(0,n.jsx)(e.code,{children:\"Car\"}),\" object is created.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"startEngine()\"}),\" is a method that defines a behavior of the \",(0,n.jsx)(e.code,{children:\"Car\"}),\" class.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Creating Objects\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"An object is an instance of a class. To create an object, we use the \",(0,n.jsx)(e.code,{children:\"new\"}),\" keyword followed by a call to a constructor of the class.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-java\",children:`Car myCar = new Car(\"Toyota\", \"Corolla\", 2022);\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This creates a new \",(0,n.jsx)(e.code,{children:\"Car\"}),\" object with the specified brand, model, and year.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Accessing Object Members\"}),`\n`,(0,n.jsx)(e.p,{children:\"We can access the fields and methods of an object using the dot notation:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-java\",children:`System.out.println(myCar.brand);  // Outputs: Toyota\nmyCar.startEngine();  // Outputs: The Toyota Corolla is starting...\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Constructors\"}),`\n`,(0,n.jsx)(e.p,{children:\"Constructors are special methods used to initialize objects. They have the same name as the class and no return type.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Default Constructor\"}),`\n`,(0,n.jsx)(e.p,{children:\"If you don't define any constructor, Java provides a default no-argument constructor:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-java\",children:`public class Dog {\n    String name;\n}\n\nDog myDog = new Dog();  // Uses default constructor\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Overloading Constructors\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can define multiple constructors with different parameters:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-java\",children:`public class Dog {\n    String name;\n    int age;\n    \n    public Dog(String name) {\n        this.name = name;\n    }\n    \n    public Dog(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\nDog dog1 = new Dog(\"Buddy\");\nDog dog2 = new Dog(\"Max\", 3);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Methods\"}),`\n`,(0,n.jsx)(e.p,{children:\"Methods define the behavior of objects. They can take parameters and return values.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-java\",children:`public class Rectangle {\n    double width;\n    double height;\n    \n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n    \n    public double calculateArea() {\n        return width * height;\n    }\n    \n    public void displayInfo() {\n        System.out.println(\"Width: \" + width + \", Height: \" + height);\n        System.out.println(\"Area: \" + calculateArea());\n    }\n}\n\nRectangle rect = new Rectangle(5, 3);\nrect.displayInfo();\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Static Members\"}),`\n`,(0,n.jsx)(e.p,{children:\"Static members belong to the class rather than to any specific instance of the class.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Static Fields\"}),`\n`,(0,n.jsx)(e.p,{children:\"Static fields are shared by all instances of a class:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-java\",children:`public class Counter {\n    static int count = 0;\n    \n    public Counter() {\n        count++;\n    }\n}\n\nCounter c1 = new Counter();\nCounter c2 = new Counter();\nSystem.out.println(Counter.count);  // Outputs: 2\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Static Methods\"}),`\n`,(0,n.jsx)(e.p,{children:\"Static methods can be called on the class itself, without creating an instance:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-java\",children:`public class MathUtils {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}\n\nint sum = MathUtils.add(5, 3);  // sum is 8\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Conclusion\"}),`\n`,(0,n.jsx)(e.p,{children:\"Classes and objects are the building blocks of object-oriented programming in Java. Classes define the structure and behavior of objects, while objects are instances of classes that you can create and manipulate in your programs. Understanding these concepts is crucial for writing effective Java code.\"})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}return j(v);})();\n;return Component;"
        },
        "_id": "java/classes-and-objects.mdx",
        "_raw": {
          "sourceFilePath": "java/classes-and-objects.mdx",
          "sourceFileName": "classes-and-objects.mdx",
          "sourceFileDir": "java",
          "contentType": "mdx",
          "flattenedPath": "java/classes-and-objects"
        },
        "type": "Java",
        "slug": "/java/classes-and-objects",
        "slugAsParams": "classes-and-objects"
      },
      "documentHash": "1728630957597",
      "hasWarnings": false,
      "documentTypeName": "Java"
    },
    "java/complete-rec.mdx": {
      "document": {
        "title": "Complete Search with Recursion",
        "author": "Many",
        "description": "Harder problems involving iterating through the entire solution space, including those that require generating subsets and permutations.\r",
        "body": {
          "raw": "\r\n## Subsets\r\n\r\n### Resources\r\n\r\n### Solution - Apple Division\r\n\r\nSince $n \\le 20$, we can solve this by trying all possible divisions\r\nof $n$ apples into two sets and finding the one with the minimum difference in\r\nweights. Here are two ways to do this.\r\n\r\n#### Generating Subsets Recursively\r\n\r\nThe first method would be to write a recursive function which searches over all\r\npossibilities.\r\n\r\nThen, we return the difference between the two sums once we've reached the end\r\nof the array.\r\n\r\n```java\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class AppleDivision {\r\n\tstatic int n;\r\n\tstatic int[] weights;\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tKattio io = new Kattio();\r\n\r\n\t\tn = io.nextInt();\r\n\t\tweights = new int[n];\r\n\t\tfor (int i = 0; i < n; i++) { weights[i] = io.nextInt(); }\r\n\r\n\t\t// Solve the problem starting at apple 0 with both sets being empty\r\n\t\tio.println(recurseApples(0, 0, 0));\r\n\t\tio.close();\r\n\t}\r\n\r\n\tstatic long recurseApples(int index, long sum1, long sum2) {\r\n\t\t// We've added all apples- return the absolute difference\r\n\t\tif (index == n) { return Math.abs(sum1 - sum2); }\r\n\r\n\t\t// Try adding the current apple to either the first or second set\r\n\t\treturn Math.min(recurseApples(index + 1, sum1 + weights[index], sum2),\r\n\t\t                recurseApples(index + 1, sum1, sum2 + weights[index]));\r\n\t}\r\n\r\n\t// CodeSnip{Kattio}\r\n}\r\n```\r\n\r\n#### Generating Subsets with Bitmasks\r\n\r\n## Warning\r\n\r\nA **bitmask** is an integer whose binary representation is used to represent a\r\nsubset. In the context of this problem, if the $i$'th bit is equal to $1$ in a particular bitmask,\r\nwe say the $i$'th apple is in $s_1$. If not, we'll say it's in $s_2$.\r\nWe can iterate through all subsets $s_1$ if we check all bitmasks ranging from\r\n$0$ to $2^N-1$.\r\n\r\nLet's do a quick demo with $N=3$.\r\nThese are the integers from $0$ to $2^3-1$ along with their\r\nbinary representations and the corresponding elements included in $s_1$.\r\nAs you can see, all possible subsets are accounted for.\r\n\r\n<center>\r\n\r\n<table>\r\n<thead>\r\n    <tr>\r\n        <td>Number</td>\r\n        <td>Binary</td>\r\n        <td>Apples In $s_1$</td>\r\n    </tr>\r\n</thead>\r\n<tbody>\r\n    <tr>\r\n        <td>0</td>\r\n        <td>`000`</td>\r\n        <td>$\\{\\}$</td>\r\n    </tr>\r\n    <tr>\r\n        <td>1</td>\r\n        <td>`001`</td>\r\n        <td>$\\{0\\}$</td>\r\n    </tr>\r\n    <tr>\r\n        <td>2</td>\r\n        <td>`010`</td>\r\n        <td>$\\{1\\}$</td>\r\n    </tr>\r\n    <tr>\r\n        <td>3</td>\r\n        <td>`011`</td>\r\n        <td>$\\{0,1\\}$</td>\r\n    </tr>\r\n    <tr>\r\n        <td>4</td>\r\n        <td>`100`</td>\r\n        <td>$\\{2\\}$</td>\r\n    </tr>\r\n    <tr>\r\n        <td>5</td>\r\n        <td>`101`</td>\r\n        <td>$\\{0,2\\}$</td>\r\n    </tr>\r\n    <tr>\r\n        <td>6</td>\r\n        <td>`110`</td>\r\n        <td>$\\{1,2\\}$</td>\r\n    </tr>\r\n    <tr>\r\n        <td>7</td>\r\n        <td>`111`</td>\r\n        <td>$\\{0,1,2\\}$</td>\r\n    </tr>\r\n</tbody>\r\n</table>\r\n</center>\r\n\r\nWith this concept, we can implement our solution.\r\n\r\nYou'll notice that our code contains some fancy bitwise operations:\r\n\r\n-   `1 << x` for an integer $x$ is another way of writing $2^x$, which, in binary,\r\n    has only the $x$'th bit turned on.\r\n-   The `&` (AND) operator will take two integers and return a new integer.\r\n    `a & b` for integers $a$ and $b$ will return a new integer whose $i$th bit is\r\n    turned on if and only if the $i$'th bit is turned on for both $a$ and $b$.\r\n    Thus, `mask & (1 << x)` will return a positive value only if the $x$'th bit is\r\n    turned on in $mask$.\r\n\r\nIf you wanna learn more about them, we have a\r\n[dedicated module](/silver/intro-bitwise) for bitwise operations.\r\n\r\n```java\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class AppleDivision {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tKattio io = new Kattio();\r\n\r\n\t\tint n = io.nextInt();\r\n\t\tint[] weights = new int[n];\r\n\t\tfor (int i = 0; i < n; i++) { weights[i] = io.nextInt(); }\r\n\r\n\t\tlong ans = Long.MAX_VALUE;\r\n\t\tfor (int mask = 0; mask < (1 << n); mask++) {\r\n\t\t\tlong sum1 = 0;\r\n\t\t\tlong sum2 = 0;\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\t// Check if the ith bit is toggled\r\n\t\t\t\tif ((mask & (1 << i)) > 0) {\r\n\t\t\t\t\t// If it is, the apple is included in sum1\r\n\t\t\t\t\tsum1 += weights[i];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsum2 += weights[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tans = Math.min(ans, Math.abs(sum1 - sum2));\r\n\t\t}\r\n\r\n\t\tio.println(ans);\r\n\t\tio.close();\r\n\t}\r\n\r\n\t// CodeSnip{Kattio}\r\n}\r\n```\r\n\r\n## Permutations\r\n\r\nA **permutation** is a reordering of a list of elements.\r\n\r\n### Lexicographical Order\r\n\r\nThis term is mentioned quite frequently, ex. in\r\n[USACO Bronze - Photoshoot](http://www.usaco.org/index.php?page=viewproblem2&cpid=988).\r\n\r\nThink about how are words ordered in a dictionary. (In fact, this is where the\r\nterm \"lexicographical\" comes from.)\r\n\r\nIn dictionaries, you will see that words beginning with the letter `a` appears\r\nat the very beginning, followed by words beginning with `b`, and so on. If two\r\nwords have the same starting letter, the second letter is used to compare them;\r\nif both the first and second letters are the same, then use the third letter to\r\ncompare them, and so on until we either reach a letter that is different, or we\r\nreach the end of some word (in this case, the shorter word goes first).\r\n\r\nPermutations can be placed into lexicographical order in almost the same way. We\r\nfirst group permutations by their first element; if the first element of two\r\npermutations are equal, then we compare them by the second element; if the\r\nsecond element is also equal, then we compare by the third element, and so on.\r\n\r\nFor example, the permutations of 3 elements, in lexicographical order, are\r\n\r\n$$\r\n[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].\r\n$$\r\n\r\nNotice that the list starts with permutations beginning with 1 (just like a\r\ndictionary that starts with words beginning with `a`), followed by those\r\nbeginning with 2 and those beginning with 3. Within the same starting element,\r\nthe second element is used to make comparisions.\r\n\r\nGenerally, unless you are specifically asked to find the lexicographically\r\nsmallest/largest solution, you do not need to worry about whether permutations\r\nare being generated in lexicographical order. However, the idea of\r\nlexicographical order does appear quite often in programming contest problems,\r\nand in a variety of contexts, so it is strongly recommended that you familiarize\r\nyourself with its definition.\r\n\r\nSome problems will ask for an ordering of elements that satisfies certain\r\nconditions. In these problems, if $N \\leq 10$, we can just iterate through all\r\n$N!=N\\cdot (N-1)\\cdot (N-2)\\cdots 1$ permutations and check each permutation for\r\nvalidity.\r\n\r\n### Solution - Creating Strings I\r\n\r\n#### Generating Permutations Recursively\r\n\r\nThis is just a slight modification of method 1 from CPH.\r\n\r\nWe'll use the recursive function to find all the permutations\r\nof the string $s$. First, keep track of how many of each character there are in\r\n$s$. For each function call, add an available character to the current string,\r\nand call with that string. When the current string has the\r\nsame size as $s$, we've found a permutation and can add it to the list.\r\n\r\n```java\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class CreatingStrings1 {\r\n\tstatic String s;\r\n\tstatic List<String> perms = new ArrayList<String>();\r\n\tstatic int[] charCount = new int[26];\r\n\r\n\tstatic void search(String curr) {\r\n\t\t// We've finished creating a permutation\r\n\t\tif (curr.length() == s.length()) {\r\n\t\t\tperms.add(curr);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (int i = 0; i < 26; i++) {\r\n\t\t\t// For all available characters\r\n\t\t\tif (charCount[i] > 0) {\r\n\t\t\t\t// Add it to the current string and continue the search\r\n\t\t\t\tcharCount[i]--;\r\n\t\t\t\tsearch(curr + (char)(i + 'a'));\r\n\t\t\t\tcharCount[i]++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tKattio io = new Kattio();\r\n\t\ts = io.next();\r\n\r\n\t\tfor (int i = 0; i < s.length(); i++) { charCount[s.charAt(i) - 'a']++; }\r\n\r\n\t\tsearch(\"\");\r\n\r\n\t\tio.println(perms.size());\r\n\t\tfor (String perm : perms) { io.println(perm); }\r\n\t\tio.close();\r\n\t}\r\n\r\n\t// CodeSnip{Kattio}\r\n}\r\n```\r\n\r\n#### Generating Permutations Using [`next_permutation`](https://en.cppreference.com/w/cpp/algorithm/next_permutation)\r\n\r\nAlternatively, we can just use the `next_permutation()` function. This function\r\ntakes in a range and modifies it to the next greater permutation. If there is no\r\ngreater permutation, it returns false. To iterate through all permutations,\r\nplace it inside a `do-while` loop. We are using a `do-while` loop here instead\r\nof a typical `while` loop because a `while` loop would modify the smallest\r\npermutation before we got a chance to process it.\r\n\r\nWhat's going to be in the `check` function depends on the problem, but it should\r\nverify whether the current permutation satisfies the constraints given in the\r\nproblem.\r\n\r\nEach call to `next_permutation` makes a constant number of swaps on average if\r\nwe go through all $N!$ permutations of size $N$.\r\n\r\n## Warning\r\n\r\nOne small detail is that you need to sort the string before calling\r\n`next_permutation()` because the method generates strings in lexicographical\r\norder. If the string isn't sorted, then strings which are lexicographically\r\nsmaller than the initial string won't be generated.\r\n\r\n#### Generating Permutations Using [`itertools.permutations`](https://docs.python.org/3/library/itertools.html#itertools.permutations)\r\n\r\nSince `itertools.permutations` treats elements as unique based on position, not\r\nvalue, it returns all permutations, with repeats. Putting the returned tuples in\r\na set can filter out duplicates, and since tuples are returned, we need to join\r\nthe characters into a string.\r\n\r\n#### By Generating Permutations\r\n\r\nA brute-force solution that checks all $\\binom{64}{8}$ possible queen\r\ncombinations will have over 4 billion arrangements to check, making it too slow.\r\n\r\nWe have to brute-force a bit smarter:\r\nnotice that we can directly generate permutations so that no two queens are\r\nattacking each other due to being in the same row or column.\r\n\r\nSince no two queens can be in the same column, it makes sense\r\nto lay one out in each row.\r\nIt remains to figure out how to vary the _rows_ each queen is in.\r\nThis can be done by generating all permutations from $1 \\cdots 8$, with the\r\nnumbers representing which row each queen is in.\r\n\r\nFor example, the permutation $[6, 0, 5, 1, 4, 3, 7, 2]$ results in this\r\nqueen arrangement:\r\n\r\n<table className=\"text-center\">\r\n    <tbody>\r\n        <tr>\r\n            <td></td>\r\n            <td>0</td>\r\n            <td>1</td>\r\n            <td>2</td>\r\n            <td>3</td>\r\n            <td>4</td>\r\n            <td>5</td>\r\n            <td>6</td>\r\n            <td>7</td>\r\n        </tr>\r\n        <tr>\r\n            <td>0</td>\r\n            <td></td>\r\n            <td>Q</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>1</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>Q</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>2</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>Q</td>\r\n        </tr>\r\n        <tr>\r\n            <td>3</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>Q</td>\r\n            <td></td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>4</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>Q</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>5</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>Q</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>6</td>\r\n            <td>Q</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>7</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>Q</td>\r\n            <td></td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\nDoing this cuts down the number of arrangements we have to check down to\r\na much more managable $8!$.\r\n\r\n```java\r\nimport java.io.*;\r\n\r\npublic class ChessboardQueens {\r\n\tprivate static final int DIM = 8;\r\n\r\n\tprivate static boolean[][] blocked = new boolean[DIM][DIM];\r\n\r\n\tprivate static final boolean[] rowsTaken = new boolean[DIM];\r\n\t// Indicators for diagonals that go from the bottom left to the top right\r\n\tprivate static final boolean[] diag1 = new boolean[DIM * 2 - 1];\r\n\t// Indicators for diagonals that go from the bottom right to the top left\r\n\tprivate static final boolean[] diag2 = new boolean[DIM * 2 - 1];\r\n\r\n\tprivate static int validNum = 0;\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tBufferedReader read = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tfor (int r = 0; r < DIM; r++) {\r\n\t\t\tString row = read.readLine();\r\n\t\t\tfor (int c = 0; c < DIM; c++) {\r\n\t\t\t\tif (row.charAt(c) == '*') { blocked[r][c] = true; }\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsearchQueens(0);\r\n\r\n\t\tSystem.out.println(validNum);\r\n\t}\r\n\r\n\tprivate static void searchQueens(int c) {\r\n\t\tif (c == DIM) {\r\n\t\t\t// We've filled all rows, increment and return\r\n\t\t\tvalidNum++;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (int r = 0; r < DIM; r++) {\r\n\t\t\tboolean row_open = !rowsTaken[r];\r\n\t\t\tboolean diag_open = !diag1[r + c] && !diag2[r - c + DIM - 1];\r\n\t\t\tif (!blocked[r][c] && row_open && diag_open) {\r\n\t\t\t\t// A row and two diagonals have been taken\r\n\t\t\t\trowsTaken[r] = diag1[r + c] = diag2[r - c + DIM - 1] = true;\r\n\t\t\t\tsearchQueens(c + 1);\r\n\t\t\t\t// And now they aren't anymore\r\n\t\t\t\trowsTaken[r] = diag1[r + c] = diag2[r - c + DIM - 1] = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n## Problems\r\n\r\nYou can find more problems at the CP2 link given above or at\r\n[USACO Training](https://train.usaco.org/). However, these sorts of problems\r\nappear much less frequently than they once did.\r\n",
          "code": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var r in e)o(n,r,{get:e[r],enumerable:!0})},d=(n,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!w.call(n,i)&&i!==r&&o(n,i,{get:()=>e[i],enumerable:!(a=p(e,i))||a.enumerable});return n};var $=(n,e,r)=>(r=n!=null?u(g(n)):{},d(e||!n||!n.__esModule?o(r,\"default\",{value:n,enumerable:!0}):r,n)),v=n=>d(o({},\"__esModule\",{value:!0}),n);var h=f((I,s)=>{s.exports=_jsx_runtime});var x={};b(x,{default:()=>c,frontmatter:()=>y});var t=$(h()),y={title:\"Complete Search with Recursion\",author:\"Many\",description:\"Harder problems involving iterating through the entire solution space, including those that require generating subsets and permutations.\"};function l(n){let e={a:\"a\",code:\"code\",em:\"em\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Subsets\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Resources\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Solution - Apple Division\"}),`\n`,(0,t.jsx)(e.p,{children:`Since $n \\\\le 20$, we can solve this by trying all possible divisions\\r\nof $n$ apples into two sets and finding the one with the minimum difference in\\r\nweights. Here are two ways to do this.`}),`\n`,(0,t.jsx)(e.h4,{children:\"Generating Subsets Recursively\"}),`\n`,(0,t.jsx)(e.p,{children:`The first method would be to write a recursive function which searches over all\\r\npossibilities.`}),`\n`,(0,t.jsx)(e.p,{children:`Then, we return the difference between the two sums once we've reached the end\\r\nof the array.`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-java\",children:`import java.io.*;\\r\nimport java.util.*;\\r\n\\r\npublic class AppleDivision {\\r\n\tstatic int n;\\r\n\tstatic int[] weights;\\r\n\\r\n\tpublic static void main(String[] args) throws Exception {\\r\n\t\tKattio io = new Kattio();\\r\n\\r\n\t\tn = io.nextInt();\\r\n\t\tweights = new int[n];\\r\n\t\tfor (int i = 0; i < n; i++) { weights[i] = io.nextInt(); }\\r\n\\r\n\t\t// Solve the problem starting at apple 0 with both sets being empty\\r\n\t\tio.println(recurseApples(0, 0, 0));\\r\n\t\tio.close();\\r\n\t}\\r\n\\r\n\tstatic long recurseApples(int index, long sum1, long sum2) {\\r\n\t\t// We've added all apples- return the absolute difference\\r\n\t\tif (index == n) { return Math.abs(sum1 - sum2); }\\r\n\\r\n\t\t// Try adding the current apple to either the first or second set\\r\n\t\treturn Math.min(recurseApples(index + 1, sum1 + weights[index], sum2),\\r\n\t\t                recurseApples(index + 1, sum1, sum2 + weights[index]));\\r\n\t}\\r\n\\r\n\t// CodeSnip{Kattio}\\r\n}\n`})}),`\n`,(0,t.jsx)(e.h4,{children:\"Generating Subsets with Bitmasks\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Warning\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"A \",(0,t.jsx)(e.strong,{children:\"bitmask\"}),` is an integer whose binary representation is used to represent a\\r\nsubset. In the context of this problem, if the $i$'th bit is equal to $1$ in a particular bitmask,\\r\nwe say the $i$'th apple is in $s_1$. If not, we'll say it's in $s_2$.\\r\nWe can iterate through all subsets $s_1$ if we check all bitmasks ranging from\\r\n$0$ to $2^N-1$.`]}),`\n`,(0,t.jsx)(e.p,{children:`Let's do a quick demo with $N=3$.\\r\nThese are the integers from $0$ to $2^3-1$ along with their\\r\nbinary representations and the corresponding elements included in $s_1$.\\r\nAs you can see, all possible subsets are accounted for.`}),`\n`,(0,t.jsx)(\"center\",{children:(0,t.jsxs)(\"table\",{children:[(0,t.jsx)(\"thead\",{children:(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"Number\"}),(0,t.jsx)(\"td\",{children:\"Binary\"}),(0,t.jsx)(\"td\",{children:\"Apples In $s_1$\"})]})}),(0,t.jsxs)(\"tbody\",{children:[(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"0\"}),(0,t.jsx)(\"td\",{children:(0,t.jsx)(e.code,{children:\"000\"})}),(0,t.jsx)(\"td\",{children:\"${}$\"})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"1\"}),(0,t.jsx)(\"td\",{children:(0,t.jsx)(e.code,{children:\"001\"})}),(0,t.jsx)(\"td\",{children:\"${0}$\"})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"2\"}),(0,t.jsx)(\"td\",{children:(0,t.jsx)(e.code,{children:\"010\"})}),(0,t.jsx)(\"td\",{children:\"${1}$\"})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"3\"}),(0,t.jsx)(\"td\",{children:(0,t.jsx)(e.code,{children:\"011\"})}),(0,t.jsx)(\"td\",{children:\"${0,1}$\"})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"4\"}),(0,t.jsx)(\"td\",{children:(0,t.jsx)(e.code,{children:\"100\"})}),(0,t.jsx)(\"td\",{children:\"${2}$\"})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"5\"}),(0,t.jsx)(\"td\",{children:(0,t.jsx)(e.code,{children:\"101\"})}),(0,t.jsx)(\"td\",{children:\"${0,2}$\"})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"6\"}),(0,t.jsx)(\"td\",{children:(0,t.jsx)(e.code,{children:\"110\"})}),(0,t.jsx)(\"td\",{children:\"${1,2}$\"})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"7\"}),(0,t.jsx)(\"td\",{children:(0,t.jsx)(e.code,{children:\"111\"})}),(0,t.jsx)(\"td\",{children:\"${0,1,2}$\"})]})]})]})}),`\n`,(0,t.jsx)(e.p,{children:\"With this concept, we can implement our solution.\"}),`\n`,(0,t.jsx)(e.p,{children:\"You'll notice that our code contains some fancy bitwise operations:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"1 << x\"}),` for an integer $x$ is another way of writing $2^x$, which, in binary,\\r\nhas only the $x$'th bit turned on.`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"The \",(0,t.jsx)(e.code,{children:\"&\"}),` (AND) operator will take two integers and return a new integer.\\r\n`,(0,t.jsx)(e.code,{children:\"a & b\"}),` for integers $a$ and $b$ will return a new integer whose $i$th bit is\\r\nturned on if and only if the $i$'th bit is turned on for both $a$ and $b$.\\r\nThus, `,(0,t.jsx)(e.code,{children:\"mask & (1 << x)\"}),` will return a positive value only if the $x$'th bit is\\r\nturned on in $mask$.`]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[`If you wanna learn more about them, we have a\\r\n`,(0,t.jsx)(e.a,{href:\"/silver/intro-bitwise\",children:\"dedicated module\"}),\" for bitwise operations.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-java\",children:`import java.io.*;\\r\nimport java.util.*;\\r\n\\r\npublic class AppleDivision {\\r\n\tpublic static void main(String[] args) throws Exception {\\r\n\t\tKattio io = new Kattio();\\r\n\\r\n\t\tint n = io.nextInt();\\r\n\t\tint[] weights = new int[n];\\r\n\t\tfor (int i = 0; i < n; i++) { weights[i] = io.nextInt(); }\\r\n\\r\n\t\tlong ans = Long.MAX_VALUE;\\r\n\t\tfor (int mask = 0; mask < (1 << n); mask++) {\\r\n\t\t\tlong sum1 = 0;\\r\n\t\t\tlong sum2 = 0;\\r\n\t\t\tfor (int i = 0; i < n; i++) {\\r\n\t\t\t\t// Check if the ith bit is toggled\\r\n\t\t\t\tif ((mask & (1 << i)) > 0) {\\r\n\t\t\t\t\t// If it is, the apple is included in sum1\\r\n\t\t\t\t\tsum1 += weights[i];\\r\n\t\t\t\t} else {\\r\n\t\t\t\t\tsum2 += weights[i];\\r\n\t\t\t\t}\\r\n\t\t\t}\\r\n\t\t\tans = Math.min(ans, Math.abs(sum1 - sum2));\\r\n\t\t}\\r\n\\r\n\t\tio.println(ans);\\r\n\t\tio.close();\\r\n\t}\\r\n\\r\n\t// CodeSnip{Kattio}\\r\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Permutations\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"A \",(0,t.jsx)(e.strong,{children:\"permutation\"}),\" is a reordering of a list of elements.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Lexicographical Order\"}),`\n`,(0,t.jsxs)(e.p,{children:[`This term is mentioned quite frequently, ex. in\\r\n`,(0,t.jsx)(e.a,{href:\"http://www.usaco.org/index.php?page=viewproblem2&cpid=988\",children:\"USACO Bronze - Photoshoot\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:`Think about how are words ordered in a dictionary. (In fact, this is where the\\r\nterm \"lexicographical\" comes from.)`}),`\n`,(0,t.jsxs)(e.p,{children:[\"In dictionaries, you will see that words beginning with the letter \",(0,t.jsx)(e.code,{children:\"a\"}),` appears\\r\nat the very beginning, followed by words beginning with `,(0,t.jsx)(e.code,{children:\"b\"}),`, and so on. If two\\r\nwords have the same starting letter, the second letter is used to compare them;\\r\nif both the first and second letters are the same, then use the third letter to\\r\ncompare them, and so on until we either reach a letter that is different, or we\\r\nreach the end of some word (in this case, the shorter word goes first).`]}),`\n`,(0,t.jsx)(e.p,{children:`Permutations can be placed into lexicographical order in almost the same way. We\\r\nfirst group permutations by their first element; if the first element of two\\r\npermutations are equal, then we compare them by the second element; if the\\r\nsecond element is also equal, then we compare by the third element, and so on.`}),`\n`,(0,t.jsx)(e.p,{children:\"For example, the permutations of 3 elements, in lexicographical order, are\"}),`\n`,(0,t.jsx)(e.p,{children:`$$\\r\n[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].\\r\n$$`}),`\n`,(0,t.jsxs)(e.p,{children:[`Notice that the list starts with permutations beginning with 1 (just like a\\r\ndictionary that starts with words beginning with `,(0,t.jsx)(e.code,{children:\"a\"}),`), followed by those\\r\nbeginning with 2 and those beginning with 3. Within the same starting element,\\r\nthe second element is used to make comparisions.`]}),`\n`,(0,t.jsx)(e.p,{children:`Generally, unless you are specifically asked to find the lexicographically\\r\nsmallest/largest solution, you do not need to worry about whether permutations\\r\nare being generated in lexicographical order. However, the idea of\\r\nlexicographical order does appear quite often in programming contest problems,\\r\nand in a variety of contexts, so it is strongly recommended that you familiarize\\r\nyourself with its definition.`}),`\n`,(0,t.jsx)(e.p,{children:`Some problems will ask for an ordering of elements that satisfies certain\\r\nconditions. In these problems, if $N \\\\leq 10$, we can just iterate through all\\r\n$N!=N\\\\cdot (N-1)\\\\cdot (N-2)\\\\cdots 1$ permutations and check each permutation for\\r\nvalidity.`}),`\n`,(0,t.jsx)(e.h3,{children:\"Solution - Creating Strings I\"}),`\n`,(0,t.jsx)(e.h4,{children:\"Generating Permutations Recursively\"}),`\n`,(0,t.jsx)(e.p,{children:\"This is just a slight modification of method 1 from CPH.\"}),`\n`,(0,t.jsx)(e.p,{children:`We'll use the recursive function to find all the permutations\\r\nof the string $s$. First, keep track of how many of each character there are in\\r\n$s$. For each function call, add an available character to the current string,\\r\nand call with that string. When the current string has the\\r\nsame size as $s$, we've found a permutation and can add it to the list.`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-java\",children:`import java.io.*;\\r\nimport java.util.*;\\r\n\\r\npublic class CreatingStrings1 {\\r\n\tstatic String s;\\r\n\tstatic List<String> perms = new ArrayList<String>();\\r\n\tstatic int[] charCount = new int[26];\\r\n\\r\n\tstatic void search(String curr) {\\r\n\t\t// We've finished creating a permutation\\r\n\t\tif (curr.length() == s.length()) {\\r\n\t\t\tperms.add(curr);\\r\n\t\t\treturn;\\r\n\t\t}\\r\n\t\tfor (int i = 0; i < 26; i++) {\\r\n\t\t\t// For all available characters\\r\n\t\t\tif (charCount[i] > 0) {\\r\n\t\t\t\t// Add it to the current string and continue the search\\r\n\t\t\t\tcharCount[i]--;\\r\n\t\t\t\tsearch(curr + (char)(i + 'a'));\\r\n\t\t\t\tcharCount[i]++;\\r\n\t\t\t}\\r\n\t\t}\\r\n\t}\\r\n\\r\n\tpublic static void main(String[] args) throws IOException {\\r\n\t\tKattio io = new Kattio();\\r\n\t\ts = io.next();\\r\n\\r\n\t\tfor (int i = 0; i < s.length(); i++) { charCount[s.charAt(i) - 'a']++; }\\r\n\\r\n\t\tsearch(\"\");\\r\n\\r\n\t\tio.println(perms.size());\\r\n\t\tfor (String perm : perms) { io.println(perm); }\\r\n\t\tio.close();\\r\n\t}\\r\n\\r\n\t// CodeSnip{Kattio}\\r\n}\n`})}),`\n`,(0,t.jsxs)(e.h4,{children:[\"Generating Permutations Using \",(0,t.jsx)(e.a,{href:\"https://en.cppreference.com/w/cpp/algorithm/next_permutation\",children:(0,t.jsx)(e.code,{children:\"next_permutation\"})})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Alternatively, we can just use the \",(0,t.jsx)(e.code,{children:\"next_permutation()\"}),` function. This function\\r\ntakes in a range and modifies it to the next greater permutation. If there is no\\r\ngreater permutation, it returns false. To iterate through all permutations,\\r\nplace it inside a `,(0,t.jsx)(e.code,{children:\"do-while\"}),\" loop. We are using a \",(0,t.jsx)(e.code,{children:\"do-while\"}),` loop here instead\\r\nof a typical `,(0,t.jsx)(e.code,{children:\"while\"}),\" loop because a \",(0,t.jsx)(e.code,{children:\"while\"}),` loop would modify the smallest\\r\npermutation before we got a chance to process it.`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"What's going to be in the \",(0,t.jsx)(e.code,{children:\"check\"}),` function depends on the problem, but it should\\r\nverify whether the current permutation satisfies the constraints given in the\\r\nproblem.`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Each call to \",(0,t.jsx)(e.code,{children:\"next_permutation\"}),` makes a constant number of swaps on average if\\r\nwe go through all $N!$ permutations of size $N$.`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Warning\"}),`\n`,(0,t.jsxs)(e.p,{children:[`One small detail is that you need to sort the string before calling\\r\n`,(0,t.jsx)(e.code,{children:\"next_permutation()\"}),` because the method generates strings in lexicographical\\r\norder. If the string isn't sorted, then strings which are lexicographically\\r\nsmaller than the initial string won't be generated.`]}),`\n`,(0,t.jsxs)(e.h4,{children:[\"Generating Permutations Using \",(0,t.jsx)(e.a,{href:\"https://docs.python.org/3/library/itertools.html#itertools.permutations\",children:(0,t.jsx)(e.code,{children:\"itertools.permutations\"})})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since \",(0,t.jsx)(e.code,{children:\"itertools.permutations\"}),` treats elements as unique based on position, not\\r\nvalue, it returns all permutations, with repeats. Putting the returned tuples in\\r\na set can filter out duplicates, and since tuples are returned, we need to join\\r\nthe characters into a string.`]}),`\n`,(0,t.jsx)(e.h4,{children:\"By Generating Permutations\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"A brute-force solution that checks all $\\\\binom\",64,8,`$ possible queen\\r\ncombinations will have over 4 billion arrangements to check, making it too slow.`]}),`\n`,(0,t.jsx)(e.p,{children:`We have to brute-force a bit smarter:\\r\nnotice that we can directly generate permutations so that no two queens are\\r\nattacking each other due to being in the same row or column.`}),`\n`,(0,t.jsxs)(e.p,{children:[`Since no two queens can be in the same column, it makes sense\\r\nto lay one out in each row.\\r\nIt remains to figure out how to vary the `,(0,t.jsx)(e.em,{children:\"rows\"}),` each queen is in.\\r\nThis can be done by generating all permutations from $1 \\\\cdots 8$, with the\\r\nnumbers representing which row each queen is in.`]}),`\n`,(0,t.jsx)(e.p,{children:`For example, the permutation $[6, 0, 5, 1, 4, 3, 7, 2]$ results in this\\r\nqueen arrangement:`}),`\n`,(0,t.jsx)(\"table\",{className:\"text-center\",children:(0,t.jsxs)(\"tbody\",{children:[(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{children:\"0\"}),(0,t.jsx)(\"td\",{children:\"1\"}),(0,t.jsx)(\"td\",{children:\"2\"}),(0,t.jsx)(\"td\",{children:\"3\"}),(0,t.jsx)(\"td\",{children:\"4\"}),(0,t.jsx)(\"td\",{children:\"5\"}),(0,t.jsx)(\"td\",{children:\"6\"}),(0,t.jsx)(\"td\",{children:\"7\"})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"0\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{children:\"Q\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"1\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{children:\"Q\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"2\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{children:\"Q\"})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"3\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{children:\"Q\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"4\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{children:\"Q\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"5\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{children:\"Q\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"6\"}),(0,t.jsx)(\"td\",{children:\"Q\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{})]}),(0,t.jsxs)(\"tr\",{children:[(0,t.jsx)(\"td\",{children:\"7\"}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{}),(0,t.jsx)(\"td\",{children:\"Q\"}),(0,t.jsx)(\"td\",{})]})]})}),`\n`,(0,t.jsx)(e.p,{children:`Doing this cuts down the number of arrangements we have to check down to\\r\na much more managable $8!$.`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-java\",children:`import java.io.*;\\r\n\\r\npublic class ChessboardQueens {\\r\n\tprivate static final int DIM = 8;\\r\n\\r\n\tprivate static boolean[][] blocked = new boolean[DIM][DIM];\\r\n\\r\n\tprivate static final boolean[] rowsTaken = new boolean[DIM];\\r\n\t// Indicators for diagonals that go from the bottom left to the top right\\r\n\tprivate static final boolean[] diag1 = new boolean[DIM * 2 - 1];\\r\n\t// Indicators for diagonals that go from the bottom right to the top left\\r\n\tprivate static final boolean[] diag2 = new boolean[DIM * 2 - 1];\\r\n\\r\n\tprivate static int validNum = 0;\\r\n\\r\n\tpublic static void main(String[] args) throws Exception {\\r\n\t\tBufferedReader read = new BufferedReader(new InputStreamReader(System.in));\\r\n\t\tfor (int r = 0; r < DIM; r++) {\\r\n\t\t\tString row = read.readLine();\\r\n\t\t\tfor (int c = 0; c < DIM; c++) {\\r\n\t\t\t\tif (row.charAt(c) == '*') { blocked[r][c] = true; }\\r\n\t\t\t}\\r\n\t\t}\\r\n\\r\n\t\tsearchQueens(0);\\r\n\\r\n\t\tSystem.out.println(validNum);\\r\n\t}\\r\n\\r\n\tprivate static void searchQueens(int c) {\\r\n\t\tif (c == DIM) {\\r\n\t\t\t// We've filled all rows, increment and return\\r\n\t\t\tvalidNum++;\\r\n\t\t\treturn;\\r\n\t\t}\\r\n\\r\n\t\tfor (int r = 0; r < DIM; r++) {\\r\n\t\t\tboolean row_open = !rowsTaken[r];\\r\n\t\t\tboolean diag_open = !diag1[r + c] && !diag2[r - c + DIM - 1];\\r\n\t\t\tif (!blocked[r][c] && row_open && diag_open) {\\r\n\t\t\t\t// A row and two diagonals have been taken\\r\n\t\t\t\trowsTaken[r] = diag1[r + c] = diag2[r - c + DIM - 1] = true;\\r\n\t\t\t\tsearchQueens(c + 1);\\r\n\t\t\t\t// And now they aren't anymore\\r\n\t\t\t\trowsTaken[r] = diag1[r + c] = diag2[r - c + DIM - 1] = false;\\r\n\t\t\t}\\r\n\t\t}\\r\n\t}\\r\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Problems\"}),`\n`,(0,t.jsxs)(e.p,{children:[`You can find more problems at the CP2 link given above or at\\r\n`,(0,t.jsx)(e.a,{href:\"https://train.usaco.org/\",children:\"USACO Training\"}),`. However, these sorts of problems\\r\nappear much less frequently than they once did.`]})]})}function c(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}return v(x);})();\n;return Component;"
        },
        "_id": "java/complete-rec.mdx",
        "_raw": {
          "sourceFilePath": "java/complete-rec.mdx",
          "sourceFileName": "complete-rec.mdx",
          "sourceFileDir": "java",
          "contentType": "mdx",
          "flattenedPath": "java/complete-rec"
        },
        "type": "Java",
        "slug": "/java/complete-rec",
        "slugAsParams": "complete-rec"
      },
      "documentHash": "1728539440124",
      "hasWarnings": false,
      "documentTypeName": "Java"
    },
    "java/introduction-to-java.mdx": {
      "document": {
        "title": "Introduction to Java",
        "author": "Venkat",
        "description": "A brief overview of Java programming language\r",
        "body": {
          "raw": "\r\n# Introduction to Java\r\n\r\nJava is a popular, versatile, and object-oriented programming language. It was developed by James Gosling at Sun Microsystems and released in 1995. Since then, it has become one of the most widely used programming languages in the world.\r\n\r\n## Key Features of Java\r\n\r\n1. **Object-Oriented**: Java is built around the concept of objects that contain data and code.\r\n\r\n2. **Platform Independent**: Java follows the \"Write Once, Run Anywhere\" philosophy.\r\n\r\n3. **Secure**: Java has built-in security features to write virus-free, tamper-free systems.\r\n\r\n4. **Robust**: Java emphasizes early checking for possible errors and runtime checking.\r\n\r\n5. **Multithreaded**: Java has built-in support for multithreaded programming.\r\n\r\n## \"Write Once, Run Anywhere\"\r\n\r\nJava's platform independence is achieved through the following process:\r\n\r\n1. Java source code is compiled into bytecode.\r\n2. Bytecode is executed by the Java Virtual Machine (JVM).\r\n3. JVM is specific to the platform it's running on, but interprets the same bytecode.\r\n\r\nThis allows Java programs to run on any device with a JVM without needing to be recompiled.\r\n\r\n## Basic Java Program\r\n\r\nHere's a simple Java program:\r\n\r\n```java\r\npublic class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello, World!\");\r\n    }\r\n}\r\n```\r\n\r\nThis program, when run, will output \"Hello, World!\" to the console.\r\n\r\n## Conclusion\r\n\r\nJava's robustness, security features, and portability have made it a go-to language for many developers. Whether you're interested in mobile app development, web services, or enterprise software, Java provides a solid foundation to build upon.\r\n",
          "code": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),b=(r,e)=>{for(var i in e)o(r,i,{get:e[i],enumerable:!0})},l=(r,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!v.call(r,t)&&t!==i&&o(r,t,{get:()=>e[t],enumerable:!(a=u(e,t))||a.enumerable});return r};var J=(r,e,i)=>(i=r!=null?p(g(r)):{},l(e||!r||!r.__esModule?o(i,\"default\",{value:r,enumerable:!0}):i,r)),y=r=>l(o({},\"__esModule\",{value:!0}),r);var c=f((M,s)=>{s.exports=_jsx_runtime});var x={};b(x,{default:()=>h,frontmatter:()=>w});var n=J(c()),w={title:\"Introduction to Java\",author:\"Venkat\",description:\"A brief overview of Java programming language\"};function d(r){let e={code:\"code\",h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Introduction to Java\"}),`\n`,(0,n.jsx)(e.p,{children:\"Java is a popular, versatile, and object-oriented programming language. It was developed by James Gosling at Sun Microsystems and released in 1995. Since then, it has become one of the most widely used programming languages in the world.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Key Features of Java\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Object-Oriented\"}),\": Java is built around the concept of objects that contain data and code.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Platform Independent\"}),': Java follows the \"Write Once, Run Anywhere\" philosophy.']}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Secure\"}),\": Java has built-in security features to write virus-free, tamper-free systems.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Robust\"}),\": Java emphasizes early checking for possible errors and runtime checking.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Multithreaded\"}),\": Java has built-in support for multithreaded programming.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:'\"Write Once, Run Anywhere\"'}),`\n`,(0,n.jsx)(e.p,{children:\"Java's platform independence is achieved through the following process:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Java source code is compiled into bytecode.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Bytecode is executed by the Java Virtual Machine (JVM).\"}),`\n`,(0,n.jsx)(e.li,{children:\"JVM is specific to the platform it's running on, but interprets the same bytecode.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"This allows Java programs to run on any device with a JVM without needing to be recompiled.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Basic Java Program\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here's a simple Java program:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-java\",children:`public class HelloWorld {\\r\n    public static void main(String[] args) {\\r\n        System.out.println(\"Hello, World!\");\\r\n    }\\r\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:'This program, when run, will output \"Hello, World!\" to the console.'}),`\n`,(0,n.jsx)(e.h2,{children:\"Conclusion\"}),`\n`,(0,n.jsx)(e.p,{children:\"Java's robustness, security features, and portability have made it a go-to language for many developers. Whether you're interested in mobile app development, web services, or enterprise software, Java provides a solid foundation to build upon.\"})]})}function h(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(d,{...r})}):d(r)}return y(x);})();\n;return Component;"
        },
        "_id": "java/introduction-to-java.mdx",
        "_raw": {
          "sourceFilePath": "java/introduction-to-java.mdx",
          "sourceFileName": "introduction-to-java.mdx",
          "sourceFileDir": "java",
          "contentType": "mdx",
          "flattenedPath": "java/introduction-to-java"
        },
        "type": "Java",
        "slug": "/java/introduction-to-java",
        "slugAsParams": "introduction-to-java"
      },
      "documentHash": "1728631025530",
      "hasWarnings": false,
      "documentTypeName": "Java"
    },
    "java/setting-up-java-environment.mdx": {
      "document": {
        "title": "Setting Up Java Environment",
        "author": "Venkat",
        "description": "A guide to install and configure Java development environment\r",
        "body": {
          "raw": "\r\n# Setting Up Java Environment\r\n\r\nThis guide will help you set up your Java development environment. We'll cover installing the Java Development Kit (JDK), configuring environment variables, and choosing an Integrated Development Environment (IDE).\r\n\r\n## Installing Java Development Kit (JDK)\r\n\r\n1. Visit the official Oracle website or adopt OpenJDK site.\r\n2. Download the latest version of JDK for your operating system.\r\n3. Run the installer and follow the installation wizard.\r\n\r\n### Verifying Installation\r\n\r\nOpen a command prompt or terminal and type:\r\n\r\n```bash\r\njava -version\r\njavac -version\r\n```\r\n\r\nIf installed correctly, you should see the version information for both commands.\r\n\r\n## Configuring Environment Variables\r\n\r\n### Windows\r\n\r\n1. Right-click on 'This PC' and select 'Properties'.\r\n2. Click on 'Advanced system settings'.\r\n3. Click on 'Environment Variables'.\r\n4. Under System Variables, click 'New' and add:\r\n    - Variable name: JAVA_HOME\r\n    - Variable value: Path to your JDK installation (e.g., C:\\Program Files\\Java\\jdk-17)\r\n5. Find the 'Path' variable, click 'Edit', and add '%JAVA_HOME%\\bin'.\r\n\r\n### macOS and Linux\r\n\r\nAdd the following to your ~/.bash_profile or ~/.zshrc:\r\n\r\n```bash\r\nexport JAVA_HOME=/path/to/your/jdk\r\nexport PATH=$JAVA_HOME/bin:$PATH\r\n```\r\n\r\nReplace `/path/to/your/jdk` with the actual path to your JDK installation.\r\n\r\n## Choosing an IDE\r\n\r\nPopular IDEs for Java development include:\r\n\r\n1. **IntelliJ IDEA**: A powerful IDE with a free community edition and a paid ultimate edition.\r\n\r\n2. **Eclipse**: A free, open-source IDE with a large plugin ecosystem.\r\n\r\n3. **NetBeans**: Another free, open-source IDE that's particularly good for beginners.\r\n\r\n### Installing an IDE\r\n\r\n1. Download your chosen IDE from its official website.\r\n2. Run the installer and follow the installation wizard.\r\n3. During setup, ensure that the IDE is configured to use your installed JDK.\r\n\r\n## Writing Your First Java Program\r\n\r\n1. Open your IDE.\r\n2. Create a new Java project.\r\n3. Create a new Java class named `HelloWorld`.\r\n4. Enter the following code:\r\n\r\n```java\r\npublic class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello, World!\");\r\n    }\r\n}\r\n```\r\n\r\n5. Run the program to see \"Hello, World!\" printed in the console.\r\n\r\n## Conclusion\r\n\r\nYou now have a basic Java development environment set up. With the JDK installed and an IDE configured, you're ready to start your Java programming journey!\r\n",
          "code": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var f=(i,n)=>()=>(n||i((n={exports:{}}).exports,n),n.exports),D=(i,n)=>{for(var l in n)o(i,l,{get:n[l],enumerable:!0})},a=(i,n,l,t)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of m(n))!v.call(i,r)&&r!==l&&o(i,r,{get:()=>n[r],enumerable:!(t=u(n,r))||t.enumerable});return i};var y=(i,n,l)=>(l=i!=null?p(g(i)):{},a(n||!i||!i.__esModule?o(l,\"default\",{value:i,enumerable:!0}):l,i)),J=i=>a(o({},\"__esModule\",{value:!0}),i);var c=f((I,d)=>{d.exports=_jsx_runtime});var w={};D(w,{default:()=>s,frontmatter:()=>E});var e=y(c()),E={title:\"Setting Up Java Environment\",author:\"Venkat\",description:\"A guide to install and configure Java development environment\"};function h(i){let n={code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...i.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h1,{children:\"Setting Up Java Environment\"}),`\n`,(0,e.jsx)(n.p,{children:\"This guide will help you set up your Java development environment. We'll cover installing the Java Development Kit (JDK), configuring environment variables, and choosing an Integrated Development Environment (IDE).\"}),`\n`,(0,e.jsx)(n.h2,{children:\"Installing Java Development Kit (JDK)\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Visit the official Oracle website or adopt OpenJDK site.\"}),`\n`,(0,e.jsx)(n.li,{children:\"Download the latest version of JDK for your operating system.\"}),`\n`,(0,e.jsx)(n.li,{children:\"Run the installer and follow the installation wizard.\"}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"Verifying Installation\"}),`\n`,(0,e.jsx)(n.p,{children:\"Open a command prompt or terminal and type:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-bash\",children:`java -version\\r\njavac -version\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"If installed correctly, you should see the version information for both commands.\"}),`\n`,(0,e.jsx)(n.h2,{children:\"Configuring Environment Variables\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Windows\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Right-click on 'This PC' and select 'Properties'.\"}),`\n`,(0,e.jsx)(n.li,{children:\"Click on 'Advanced system settings'.\"}),`\n`,(0,e.jsx)(n.li,{children:\"Click on 'Environment Variables'.\"}),`\n`,(0,e.jsxs)(n.li,{children:[\"Under System Variables, click 'New' and add:\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Variable name: JAVA_HOME\"}),`\n`,(0,e.jsx)(n.li,{children:\"Variable value: Path to your JDK installation (e.g., C:\\\\Program Files\\\\Java\\\\jdk-17)\"}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.li,{children:\"Find the 'Path' variable, click 'Edit', and add '%JAVA_HOME%\\\\bin'.\"}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"macOS and Linux\"}),`\n`,(0,e.jsx)(n.p,{children:\"Add the following to your ~/.bash_profile or ~/.zshrc:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-bash\",children:`export JAVA_HOME=/path/to/your/jdk\\r\nexport PATH=$JAVA_HOME/bin:$PATH\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Replace \",(0,e.jsx)(n.code,{children:\"/path/to/your/jdk\"}),\" with the actual path to your JDK installation.\"]}),`\n`,(0,e.jsx)(n.h2,{children:\"Choosing an IDE\"}),`\n`,(0,e.jsx)(n.p,{children:\"Popular IDEs for Java development include:\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"IntelliJ IDEA\"}),\": A powerful IDE with a free community edition and a paid ultimate edition.\"]}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Eclipse\"}),\": A free, open-source IDE with a large plugin ecosystem.\"]}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"NetBeans\"}),\": Another free, open-source IDE that's particularly good for beginners.\"]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"Installing an IDE\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Download your chosen IDE from its official website.\"}),`\n`,(0,e.jsx)(n.li,{children:\"Run the installer and follow the installation wizard.\"}),`\n`,(0,e.jsx)(n.li,{children:\"During setup, ensure that the IDE is configured to use your installed JDK.\"}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Writing Your First Java Program\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Open your IDE.\"}),`\n`,(0,e.jsx)(n.li,{children:\"Create a new Java project.\"}),`\n`,(0,e.jsxs)(n.li,{children:[\"Create a new Java class named \",(0,e.jsx)(n.code,{children:\"HelloWorld\"}),\".\"]}),`\n`,(0,e.jsx)(n.li,{children:\"Enter the following code:\"}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-java\",children:`public class HelloWorld {\\r\n    public static void main(String[] args) {\\r\n        System.out.println(\"Hello, World!\");\\r\n    }\\r\n}\n`})}),`\n`,(0,e.jsxs)(n.ol,{start:\"5\",children:[`\n`,(0,e.jsx)(n.li,{children:'Run the program to see \"Hello, World!\" printed in the console.'}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Conclusion\"}),`\n`,(0,e.jsx)(n.p,{children:\"You now have a basic Java development environment set up. With the JDK installed and an IDE configured, you're ready to start your Java programming journey!\"})]})}function s(i={}){let{wrapper:n}=i.components||{};return n?(0,e.jsx)(n,{...i,children:(0,e.jsx)(h,{...i})}):h(i)}return J(w);})();\n;return Component;"
        },
        "_id": "java/setting-up-java-environment.mdx",
        "_raw": {
          "sourceFilePath": "java/setting-up-java-environment.mdx",
          "sourceFileName": "setting-up-java-environment.mdx",
          "sourceFileDir": "java",
          "contentType": "mdx",
          "flattenedPath": "java/setting-up-java-environment"
        },
        "type": "Java",
        "slug": "/java/setting-up-java-environment",
        "slugAsParams": "setting-up-java-environment"
      },
      "documentHash": "1728631030082",
      "hasWarnings": false,
      "documentTypeName": "Java"
    }
  }
}
